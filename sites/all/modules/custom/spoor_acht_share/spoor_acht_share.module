<?php
/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function spoor_acht_share_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'spoor_acht_share' => array(
      'label' => t('Spoor 8 share buttons'),
      'description' => t('Create share buttons for a node.'),
      'default_widget' => 'spoor_acht_share_buttons_icons',
      'default_formatter' => 'spoor_acht_share_simple',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function spoor_acht_share_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see spoor_acht_share_field_formatter_view()
 */
function spoor_acht_share_field_formatter_info() {
  return array(
    // This formatter will render the share buttons as nice icons.
    'spoor_acht_share_simple' => array(
      'label' => t('Spoor 8 share icons'),
      'field types' => array('spoor_acht_share'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see spoor_acht_share_field_formatter_info()
 */
function spoor_acht_share_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // Call the buttons theme function. Pass the entity as parameter.
    case 'spoor_acht_share_simple':
      foreach ($items as $delta => $item) {
        if ($item['spoor_acht_share'] == '1') {
          $element[$delta] = array(
            '#theme' => 'spoor_acht_share_icons',
            '#entity' => $entity,
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see spoor_acht_share_field_widget_form()
 * @todo: select the share buttons you need
 */
function spoor_acht_share_field_widget_info() {
  return array(
    'spoor_acht_share_buttons_icons' => array(
      'label' => t('Share button icons'),
      'field types' => array('spoor_acht_share'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * @todo: expand with share buttons selection.
 */
function spoor_acht_share_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['spoor_acht_share']) ? (int) $items[$delta]['spoor_acht_share'] : 1;

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'spoor_acht_share_buttons_icons':
      $widget += array(
        '#type' => 'checkbox',
        '#title' => t('Show the share buttons.'),
        '#default_value' => $value,
      );
      break;
  }

  $element['spoor_acht_share'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see spoor_acht_share_field_validate()
 * @see form_error()
 */
function spoor_acht_share_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'spoor_acht_share_invalid':
      form_error($element, $error['message']);
      break;
  }
}

function spoor_acht_share_theme() {
  return array(
    'spoor_acht_share_icons' => array(
      'variables' => array(
        'entity' => NULL,
        'attributes' => array()
      ),
      'file' => ('inc/spoor_acht_share.theme.inc')
    ),
  );
}
